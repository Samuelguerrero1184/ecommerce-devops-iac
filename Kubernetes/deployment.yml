apiVersion: apps/v1
kind: Deployment
metadata:
  name: admin-store
spec:
  replicas: 1
  selector:
    matchLabels:
      app: admin-store
  template:
    metadata:
      labels:
        app: admin-store
    spec:
      containers:
        - name: admin-store
          image: containerRegistryGrupo1.azurecr.io/images/ecommerce-admin:0.0.8
          ports:
            - containerPort: 3000
          envFrom:
            - configMapRef:
                name: ecommerce-admin-config
            - secretRef:
                name: ecommerce-secrets

---

apiVersion: v1
kind: Service
metadata:
  name: admin-store
spec:
  selector:
    app: admin-store
  ports:
    - protocol: TCP
      port: 3000
      targetPort: 3000
  type: LoadBalancer
  loadBalancerIP: 52.146.45.76

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: store
spec:
  replicas: 1
  selector:
    matchLabels:
      app: store
  template:
    metadata:
      labels:
        app: store
    spec:
      containers:
        - name: store
          image: containerRegistryGrupo1.azurecr.io/images/ecommerce-store:0.0.3
          ports:
            - containerPort: 3001
          envFrom:
            - configMapRef:
                name: storeconfig

---
apiVersion: v1
kind: Service
metadata:
  name: store
spec:
  selector:
    app: store
  ports:
    - protocol: TCP
      port: 3001
      targetPort: 3001
  type: LoadBalancer
  loadBalancerIP: 4.255.51.73

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql-db
spec:
  selector:
    matchLabels:
      app: mysql-db
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: mysql-db
    spec:
      containers:
        - image: containerRegistryGrupo1.azurecr.io/images/db-sql:0.0.3
          name: mysql-db
          ports:
            - containerPort: 3036
          envFrom:
             - secretRef:
                name: mysqlsecret
--- 
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi

---                
apiVersion: v1
kind: Service
metadata:
  name: mysql-db
spec:
  ports:
    - port: 3306
  selector:
    app: mysql-db
  clusterIP: None

---
apiVersion: v1
kind: Service
metadata:
  name: prometheus
  namespace: default
spec:
  ports:
    - name: web
      port: 9090
      targetPort: 9090
  selector:
    app: prometheus

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: prometheus
  template:
    metadata:
      labels:
        app: prometheus
    spec:
      containers:
        - name: prometheus
          image: prom/prometheus:latest
          ports:
            - containerPort: 9090
          volumeMounts:
            - name: prometheus-config
              mountPath: /etc/prometheus/
      volumes:
        - name: prometheus-config
          configMap:
            name: prometheus-config

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-config
  namespace: default
data:
  prometheus.yml: |
    global:
      scrape_interval: 15s
    scrape_configs:
      - job_name: 'prometheus'
        static_configs:
          - targets: ['localhost:9090']

---
apiVersion: v1
kind: Service
metadata:
  name: grafana
  namespace: default
spec:
  ports:
    - name: web
      port: 3002
      targetPort: 3002
  selector:
    app: grafana

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
    spec:
      containers:
        - name: grafana
          image: grafana/grafana:latest
          ports:
            - containerPort: 3002
          env:
            - name: GF_SERVER_HTTP_PORT
              value: "3002"
          volumeMounts:
            - name: grafana-storage
              mountPath: /var/lib/grafana
      volumes:
        - name: grafana-storage
          emptyDir: {}

---
apiVersion: v1
kind: Service
metadata:
  name: postgres
  namespace: default
spec:
  ports:
    - name: postgres
      port: 5432
      targetPort: 5432
  selector:
    app: postgres

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
        - name: postgres
          image: postgres:13
          ports:
            - containerPort: 5432
          env:
            - name: POSTGRES_USER
              value: sonarqube
            - name: POSTGRES_PASSWORD
              value: sonarqube
            - name: POSTGRES_DB
              value: sonarqube
          volumeMounts:
            - name: postgres-storage
              mountPath: /var/lib/postgresql/data
      volumes:
        - name: postgres-storage
          emptyDir: {}

---
apiVersion: v1
kind: Service
metadata:
  name: sonarqube
  namespace: default
spec:
  ports:
    - name: web
      port: 9000
      targetPort: 9000
  selector:
    app: sonarqube

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: sonarqube
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: sonarqube
  template:
    metadata:
      labels:
        app: sonarqube
    spec:
      containers:
        - name: sonarqube
          image: sonarqube:latest
          ports:
            - containerPort: 9000
          env:
            - name: SONARQUBE_JDBC_URL
              value: jdbc:postgresql://postgres:5432/sonarqube
            - name: SONARQUBE_JDBC_USERNAME
              value: sonarqube
            - name: SONARQUBE_JDBC_PASSWORD
              value: sonarqube
          volumeMounts:
            - name: sonarqube-storage
              mountPath: /opt/sonarqube/data
            - name: sonarqube-logs
              mountPath: /opt/sonarqube/logs
            - name: sonarqube-extensions
              mountPath: /opt/sonarqube/extensions
      volumes:
        - name: sonarqube-storage
          emptyDir: {}
        - name: sonarqube-logs
          emptyDir: {}
        - name: sonarqube-extensions
          emptyDir: {}

---
